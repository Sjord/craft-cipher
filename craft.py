S = [0xc, 0xa, 0xd, 0x3, 0xe, 0xb, 0xf, 0x7, 0x8, 0x9, 0x1, 0x5, 0x0, 0x2, 0x4, 0x6]
P = [0xf, 0xc, 0xd, 0xe, 0xa, 0x9, 0x8, 0xb, 0x6, 0x5, 0x4, 0x7, 0x1, 0x2, 0x3, 0x0]
Q = [0xc, 0xa, 0xf, 0x5, 0xe, 0x8, 0x9, 0x2, 0xb, 0x3, 0x7, 0x4, 0x6, 0x0, 0x1, 0xd]
RC3 = [0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4,
       0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5]
RC4 = [0x1, 0x8, 0x4, 0x2, 0x9, 0xc, 0x6, 0xb, 0x5, 0xa, 0xd, 0xe, 0xf, 0x7, 0x3, 0x1,
       0x8, 0x4, 0x2, 0x9, 0xc, 0x6, 0xb, 0x5, 0xa, 0xd, 0xe, 0xf, 0x7, 0x3, 0x1, 0x8]

dec = False  # encryption: False, decryption: True

Key = [
    [0x2, 0x7, 0xa, 0x6, 0x7, 0x8, 0x1, 0xa, 0x4, 0x3, 0xf, 0x3, 0x6, 0x4, 0xb, 0xc],
    [0x9, 0x1, 0x6, 0x7, 0x0, 0x8, 0xd, 0x5, 0xf, 0xb, 0xb, 0x5, 0xa, 0xe, 0xf, 0xe]
]
Tweak = [0x5, 0x4, 0xc, 0xd, 0x9, 0x4, 0xf, 0xf, 0xd, 0x0, 0x6, 0x7, 0x0, 0xa, 0x5, 0x8]
Stt = [0x5, 0x7, 0x3, 0x4, 0xf, 0x0, 0x0, 0x6, 0xd, 0x8, 0xd, 0x8, 0x8, 0xa, 0x3, 0xe]

TK = [[0] * 16 for _ in range(4)]

def Initialize_key():
    for i in range(16):
        TK[0][i] = Key[0][i] ^ Tweak[i]
        TK[1][i] = Key[1][i] ^ Tweak[i]
        TK[2][i] = Key[0][i] ^ Tweak[Q[i]]
        TK[3][i] = Key[1][i] ^ Tweak[Q[i]]
    if dec:
        for j in range(4):
            for i in range(4):
                TK[j][i] ^= (TK[j][i + 8] ^ TK[j][i + 12])
                TK[j][i + 4] ^= TK[j][i + 12]

def Round(r):
    for i in range(4):  # MixColumn
        Stt[i] ^= (Stt[i + 8] ^ Stt[i + 12])
        Stt[i + 4] ^= Stt[i + 12]

    ind = r
    if dec:
        ind = 31 - r

    Stt[4] ^= RC4[ind]  # AddConstant
    Stt[5] ^= RC3[ind]

    for i in range(16):  # AddTweakey
        Stt[i] ^= TK[ind % 4][i]

    if r != 31:
        Temp = [0] * 16
        for i in range(16):  # Permutation
            Temp[P[i]] = Stt[i]

        for i in range(16):  # SB0x
            Stt[i] = S[Temp[i]]

def main():
    Initialize_key()

    for r in range(32):
        Round(r)

if __name__ == "__main__":
    main()
